package October_2022;

/*
    神奇字符串 s 仅由 '1' 和 '2' 组成, 并需要遵守下面的规则:
        神奇字符串 s 的神奇之处在于, 串联字符串中 '1' 和 '2' 的连续出现次数可以生成该字符串.
        s 的前几个元素是 s = "1221121221221121122……".
        如果将 s 中连续的若干 1 和 2 进行分组, 可以得到 "1 22 11 2 1 22 1 22 11 2 11 22 ......".
        每组中 1 或者 2 的出现次数分别是 "1 2 2 1 1 2 1 2 2 1 2 2 ......".
        上面的出现次数正是 s 自身.
    给你一个整数 n ，返回在神奇字符串 s 的前 n 个数字中 1 的数目。
 */
public class magicalString_481 {
    public int magicalString(int n) {
        //n < 4时, s = "122", 因此 '1' 的数目直接返回 1.
        if(n < 4){
            return 1;
        }
        //构造字符串, 初始化为 "122".
        char[] s = new char[n];
        s[0] = '1';
        s[1] = '2';
        s[2] = '2';
        int res = 1;
        //使 i 指向现在需构造的对应组(n 个 '1'/'2')的大小
        //使 j 指向当前需要构造的对应组的位置
        int i = 2, j = 3;
        while(j < n){
            //size 为构造对应组的大小
            int size = s[i] - '0';
            //num 为构造对应组的值
            int num = 3 - (s[j - 1] - '0');
            while(size > 0 && j < n){
                s[j] = (char)('0' + num);
                //num == 1 时计数
                if(num == 1){
                    res++;
                }
                j++;
                size--;
            }
            i++;
        }
        return res;
    }
}
